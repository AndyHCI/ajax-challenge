
"use strict";


var commentUrl = 'https://api.parse.com/1/classes/comments';

angular.module('CommentApp', ['ui.bootstrap'])
    .config(function($httpProvider) {
        //Parse required two extra headers sent with every HTTP request: X-Parse-Application-Id, X-Parse-REST-API-Key
        //the first needs to be set to your application's ID value
        //the second needs to be set to your application's REST API key
        //both of these are generated by Parse when you create your application via their web site
        //the following lines will add these as default headers so that they are sent with every
        //HTTP request we make in this application
        $httpProvider.defaults.headers.common['X-Parse-Application-Id'] = 'Rjw3p22PKjc2qfyoBWdilmntiJA53Pv9GmlUV9bg';
        $httpProvider.defaults.headers.common['X-Parse-REST-API-Key'] = 'FScI3CrvEGYUs1LzpD9gzYPIGDQ7aoZOI5jByiHR';
    })
    .controller('CommentController', function($scope, $http) {
        $scope.refreshComments = function() {
            $http.get(commentUrl + '?where={"done": false}')
                .success(function(data) {
                     //when returning a list of data, Parse will always return an
                    //object with one property called 'results', which will contain an
                    //array containing all the data objects
                    $scope.comments = data.results;
                });
        };
        //call refreshComments() to get the initial set of comments on page load
        $scope.refreshComments();

        //initialize a new comment object on the scope for the new comment form
        $scope.newComment = {done: false};

        //function to add a comment
        $scope.addComment = function() {
            $scope.inserting = true;
            $http.post(commentUrl, $scope.newComment)
                .success(function(responseData) {
                    //Parse will return the new objectId in the response data
                    $scope.newComment .objectId = responseData.objectId;
                    $scope.comments.push($scope.newComment);
                    $scope.newComment  = {done: false};
                })
                .finally(function () {
                    $scope.inserting = false; 
                });
        };

        //function to update an existing comment
        $scope.updateComment = function(comment) {
            $http.put(commentUrl + '/' + comment.objectId, comment)
                .success(function(responseData) {
                    //nothing we really need to do since local object is already up-to-date
                })
                .error(function(err) {
                    console.log(err);
                    //notify user in some way
                })
                .finally(function() {
                    $scope.updating = false;
                });

        };

        $scope.incrementVotes = function(comment, amount) {
            var postData = {
                votes: {
                    __op: "Increment",
                    amount: amount
                }
            };

            $scope.updating = true;
            $http.put(commentUrl + '/' + comment.objectId, postData)
                .success(function(respData) {
                    comment.votes = respData.votes;
                })
                .error(function(err) {
                    console.log(err);
                })
                .finally(function() {
                    $scope.updating = false;
                });
        };

    });
